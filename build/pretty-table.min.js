/*
        License here,
        I dont think too  much about licence
        just feel free to do anything you want... :-)
*/
var PrettyTable={view:{},tpl:{}};PrettyTable.tpl.Table=''+'<table class="table table-hover">'+'<thead></thead>'+'<tbody></tbody>'+'</table>'
PrettyTable.tpl.Comparer=''+'<table class="table comparer">'+'<thead></thead>'+'<tr>'+'<td class="table1">'+'</td>'+'<td class="table2">'+'</td>'+'</tr>'+'<tbody></tbody>'+'</table>'
PrettyTable.view.Cell=Backbone.View.extend({initialize:function(opt){this.el=$('<td />');this.counterpart=opt.counterpart;this.data=opt.data;this.dataCouterpart=opt.dataCouterpart;this.importantInfo=opt.importantInfo;this.render();},render:function(){if(this.counterpart===undefined){var nodeCounterpart=this.counterpart===undefined?undefined:this.counterpart.node;}else{var nodeCounterpart=this.counterpart.node;}
if(_.isObject(this.data)){this.node=new PrettyJSON.view.Node({el:this.el,data:this.data,compareTo:this.dataCouterpart,compare:true,counterpart:nodeCounterpart,importantInfo:this.importantInfo});}else{this.el.html(this.data)}}});PrettyTable.view.Header=Backbone.View.extend({initialize:function(opt){this.value=opt.value;this.el=$('<th />');this.render();},render:function(){this.el.html(this.value);return this;}});PrettyTable.view.Row=Backbone.View.extend({initialize:function(opt){this.el=$('<tr />');this.counterpart=opt.counterpart;this.model=opt.model;this.modelCounterpart=opt.modelCounterpart;this.headers=opt.headers;this.importantInfo=opt.importantInfo;this.next=opt.next;this.previous=opt.previous;this.cells=[];this.renderCells();},renderCells:function(){if(this.counterpart===undefined){var cellCounterpart=undefined;}else{var cellCounterpart=this.counterpart.cells[0];}
if(this.headers!==undefined&&this.headers.length!==0){_.each(this.headers,function(header){var opt={data:this.model[header.value]};var cell=new PrettyTable.view.Cell(opt);this.el.append(cell.el);this.cells.push(cell);},this);}else{var opt={counterpart:cellCounterpart,data:this.model,dataCouterpart:this.modelCounterpart,importantInfo:this.importantInfo};var cell=new PrettyTable.view.Cell(opt);this.el.append(cell.el);this.cells.push(cell);}
if(this.next||this.previous){var actions='';if(this.previous)actions+='<a href="#" class="previous"><i class="fa fa-lg fa-chevron-left"></i>'
if(this.next)actions+='<a href="#" class="next"><i class="fa fa-lg fa-chevron-right"></i></a>';var opt={data:actions}
var cell=new PrettyTable.view.Cell(opt);this.el.append(cell.el);if(this.next)cell.el.find("a.next").on("click",{next:this.next,row:this,model:this.model},function(e){e.data.next(e.data.row,e.data.model)})
if(this.previous)cell.el.find("a.previous").on("click",{previous:this.previous,row:this,model:this.model},function(e){e.data.previous(e.data.row,e.data.model)})}},setVisible:function(yes){if(yes){this.el.css('visibility','visible');}else{this.el.css('visibility','hidden');}},update:function(newModel){this.model=newModel
this.el.empty()
this.cells=[]
this.renderCells()}});PrettyTable.view.Table=Backbone.View.extend({initialize:function(opt){this.headerData=opt.headers;this.models=opt.models;this.next=opt.next;this.previous=opt.previous;this.headers=[];this.rows=[];this.render();this.renderRows();},elements:function(){this.els={head:$(this.el).find('thead'),body:$(this.el).find('tbody')};},render:function(){this.tpl=_.template(PrettyTable.tpl.Table);$(this.el).html(this.tpl);this.elements();_.each(this.headerData,function(headerValue){var opt={value:headerValue};var header=new PrettyTable.view.Header(opt);this.els.head.append(header.el);this.headers.push(header);},this);if(this.next||this.previous){var opt={value:"actions"};var header=new PrettyTable.view.Header(opt);this.els.head.append(header.el);}},renderRows:function(models,renderer){_.each(this.models,function(model){var opt={model:model,headers:this.headers,next:this.next,previous:this.previous};var row=new PrettyTable.view.Row(opt);this.els.body.append(row.el);this.rows.push(row)},this);},append:function(row){this.rows.push(row);this.els.body.append(row.el);}})
PrettyTable.view.Comparer=Backbone.View.extend({initialize:function(opt){this.keys=opt.keys;this.headers=opt.headers;this.models1=opt.models1;this.models2=opt.models2;this.importantInfo=opt.importantInfo;this.render();this.renderTables();},elements:function(){this.els={cell1:$(this.el).find('.table1'),cell2:$(this.el).find('.table2')};},render:function(){this.tpl=_.template(PrettyTable.tpl.Comparer);$(this.el).html(this.tpl);this.elements();},renderTables:function(){var models1=this.models1;var models2=this.models2;var table1=new PrettyTable.view.Table({el:this.els.cell1,headers:this.headers});var table2=new PrettyTable.view.Table({el:this.els.cell2,headers:this.headers});var comparator=this.createComparator(this.keys);models1.sort(comparator);models2.sort(comparator);var models1Length=models1.length;var models2Length=models2.length;var i=0;var j=0;while(i<models1Length&&j<models2Length){if(comparator(models1[i],models2[j])===0){this.createAndAppend(models1[i],models2[j],table1,table2);i++;j++;}else if(comparator(models1[i],models2[j])<0){this.createAndAppend(models1[i],models1[i],table1,table2);table2.rows[table2.rows.length-1].setVisible(false);i++;}else{this.createAndAppend(models2[j],models2[j],table1,table2);table1.rows[table1.rows.length-1].setVisible(false);j++;}}
while(i<models1Length){this.createAndAppend(models1[i],models1[i],table1,table2);table2.rows[table2.rows.length-1].setVisible(false);i++;}
while(j<models2Length){this.createAndAppend(models2[j],models2[j],table1,table2);table1.rows[table1.rows.length-1].setVisible(false);j++;}},createAndAppend:function(model1,model2,table1,table2){var row1=new PrettyTable.view.Row({model:model1,modelCounterpart:model2,headers:table1.headers,importantInfo:this.importantInfo});table1.append(row1);var row2=new PrettyTable.view.Row({counterpart:row1,model:model2,modelCounterpart:model1,headers:table2.headers,importantInfo:this.importantInfo});table2.append(row2);},createComparator:function(keys){return function(model1,model2){for(var i in keys){var key=keys[i];if(model1[key]<model2[key])return-1;if(model1[key]>model2[key])return 1;}
return 0;}}})